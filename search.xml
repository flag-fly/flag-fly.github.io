<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>国庆节的第二篇</title>
    <url>/2020/10/03/Maxwell&#39;s%20equation/</url>
    <content><![CDATA[<h1 id="国庆节的第五天"><a href="#国庆节的第五天" class="headerlink" title="国庆节的第五天"></a>国庆节的第五天</h1><p>今天看了许久麦克斯韦方程组，写点看到的东西。</p>
<h2 id="广义麦克斯韦方程组"><a href="#广义麦克斯韦方程组" class="headerlink" title="广义麦克斯韦方程组"></a>广义麦克斯韦方程组</h2><p>先亮明麦克斯韦方程组：</p>
<script type="math/tex; mode=display">
\begin{aligned}
\vec{\nabla} \cdot \vec{D} &=\rho \\
\vec{\nabla} \cdot \vec{B} &=\rho_m \\
\vec{\nabla} \times \vec{H} &=\vec{\jmath}+\frac{\partial \vec{D}}{\partial t} \\
\vec{\nabla} \times \vec{E} &=-\vec{\jmath}_m-\frac{\partial \vec{B}}{\partial t}
\end{aligned}</script><p>这里多出来的$\rho_m$、$J_m$ 是磁荷密度、磁流密度（假设存在），这是广义麦克斯韦方程组里面引入的一个概念，对应于电荷密度和电流密度，对于其是否存在，物理界现在还有争议，但是不妨碍我们引入电荷密度和磁流密度，因为这可以大大简化我们对电磁场的计算。广义麦克斯韦方程组存在明显的对称性，我们只需求出其中电场（磁场），那么对应的磁场（电场）也能由对称性得出。</p>
<h2 id="对麦克斯韦旋度方程的思考"><a href="#对麦克斯韦旋度方程的思考" class="headerlink" title="对麦克斯韦旋度方程的思考"></a>对麦克斯韦旋度方程的思考</h2><p>我们知道，麦克斯韦的散度方程可以解释电场和磁场的部分特性，比如电场在$\rho$不等于0的时候可以解释成有源场，也就是说电场线有起点或者有终点，另一端延申至无穷。磁场的话暂时没有发现磁荷，故都是无源场，也就说，磁场线是闭合曲线，有始有终。  </p>
<p> 其实啊，我觉得麦克斯韦的旋度方程更能体现电磁场的精髓，这两个方程很明显的体现了电生磁，磁生电的特性。并且，散度方程可以由这两个旋度方程推出了。这也就是说我们在求解电磁场的时候，可能只需要电场强度和磁场强度满足旋度方程就可以了。做一个简单的数学推导证明一下：</p>
<script type="math/tex; mode=display">
\vec{\nabla} \cdot {\vec{\nabla} \times \vec{H}} =\vec{\nabla} \cdot{\vec{\jmath}}+\vec{\nabla} \cdot{\frac{\partial \vec{D}}{\partial t}}</script><p>数学上我们很容易得知左边磁场强度旋度的散度为0，右边的算式第一项，用电流连续性原理可得：</p>
<script type="math/tex; mode=display">
\vec{\nabla} \cdot{\vec{\jmath}}=-\frac{\partial \vec{\rho}}{\partial t}</script><p>此时得到方程：</p>
<script type="math/tex; mode=display">
0=-\frac{\partial \vec{\rho}}{\partial t}+\frac{\partial \vec{\nabla} \cdot\vec{D}}{\partial t}</script><p>最后得到麦克斯韦散度方程：</p>
<script type="math/tex; mode=display">
\vec{\nabla} \cdot \vec{D} =\rho</script><p>另一个推导也是同理。这对我们之后运用计算机求解电磁场有着极大的意义，也就是说电场和磁场只需要满足两个旋度方程就可以求出场的分布。（当然，源和边界条件要知道）</p>
<h1 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h1><p><strong>散度</strong>： $\nabla$ 与一个矢量函数点积的结果；</p>
<script type="math/tex; mode=display">
\nabla \cdot \vec{A}=\frac{\partial A_{x}}{\partial x}+\frac{\partial A_{y}}{\partial y}+\frac{\partial A_{z}}{\partial z}</script><p><strong>旋度</strong>： $\nabla$与一个矢量函数叉积的结果；</p>
<script type="math/tex; mode=display">
\nabla \times \vec{A}=\left|\begin{array}{ccc}
\hat{i} & \hat{j} & \hat{k} \\
\frac{\partial}{\partial x} & \frac{\partial}{\partial y} & \frac{\partial}{\partial z} \\
A_{x} & A_{y} & A_{z}
\end{array}\right|</script><script type="math/tex; mode=display">
\nabla \times \vec{A}=\left(\frac{\partial A_{z}}{\partial y}-\frac{\partial A_{y}}{\partial z}\right) \hat{i}-\left(\frac{\partial A_{z}}{\partial x}-\frac{\partial A_{x}}{\partial z}\right) \hat{j}+\left(\frac{\partial A_{y}}{\partial x}-\frac{\partial A_{x}}{\partial y}\right) \hat{k}</script><p>贴个图<br><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/2020-10-05-21-15-11.png" alt=""></p>
]]></content>
      <categories>
        <category>麦克斯韦方程组</category>
      </categories>
      <tags>
        <tag>Maxwell equation</tag>
      </tags>
  </entry>
  <entry>
    <title>国庆节的开始</title>
    <url>/2020/10/03/hardworking/</url>
    <content><![CDATA[<h1 id="国庆节的开始"><a href="#国庆节的开始" class="headerlink" title="国庆节的开始"></a>国庆节的开始</h1><p><em>国庆与中秋的相遇，家与国碰了个满怀。</em></p>
<p>上午难得的睡到了9点，自然醒的状态虽没有之前的生龙活虎，也算是储备好了一天的能量。<br>开始蹩脚的编程吧！</p>
<ol>
<li>感觉和教程说的不太一样</li>
<li>咋没有自动生成标题<ol>
<li>原来要加一个空格，不然识别不来</li>
<li>这样啊，我可以了</li>
</ol>
</li>
<li>标完序号记得空格一个数字。</li>
</ol>
<p>这个行间距怎么调呀？先不管了，插个图片试试</p>
<p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/2020-10-03-17-21-15.png" alt=""></p>
<p>在vscode上确实可以用快捷键ctrl+Alt+v粘贴上去了。(想要发布到hexo上还是需要加一个步骤，搞一个图床，详细步骤看<a href="https://sitoi.cn/posts/39161.html#%E7%94%9F%E6%88%90%E4%B8%80%E4%B8%AA-Token">这个大佬弄的</a>)</p>
<p>再试一下公式编辑快不快，用神器，毕竟latex还没有学会:(hexo博客很多时候识别不了latex公式，可以看这个<a href="https://www.jianshu.com/p/68e6f82d88b7">教程</a>) </p>
<script type="math/tex; mode=display">\lim_{x\to0}\frac{sin(x)}{x}=1</script><p>$\lim_{x\to\infty}x^{\frac{1}{x}}=?$这是内嵌公式。latex还是挺方便的，和手写公式一个逻辑，就是要记的命令多一些。</p>
<p><strong>公式没有显示，记得多刷新几次页面</strong></p>
<p>接下来写表格，据说会复杂一些。</p>
<div class="table-container">
<table>
<thead>
<tr>
<th style="text-align:center">早上</th>
<th style="text-align:center">中午</th>
<th style="text-align:center">晚上</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">没吃饭，起的晚</td>
<td style="text-align:center">多吃点，有点饿</td>
<td style="text-align:center">吃🍔算了</td>
</tr>
<tr>
<td style="text-align:center">表格好像不能固定大小，随着文字变化变化</td>
<td style="text-align:center">这就离谱啊，不能确定大小吗？</td>
<td style="text-align:center">这咋固定啊，就靠打字的数量吗？</td>
</tr>
</tbody>
</table>
</div>
<p>还行吧，感觉不是很复杂。(经过昨天一天的试错，这个分割符一定要打好，边上要加就都加，不加就都不加。)</p>
<p>加入链接试试，<a href="https://www.limfx.pro/ReadArticle/57/yi-zhong-xie-zuo-de-xin-fang-fa">学习的文章</a>；还行，不复杂。<br>接下来就代码块了，我也没啥代码，随便写两行😏。<br><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> s=<span class="number">1</span>;<span class="built_in">cout</span>&lt;&lt;s;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">s = <span class="string">&quot;Python syntax highlighting&quot;</span>;  </span><br><span class="line"><span class="keyword">print</span> s</span><br></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>注意Markdown没有什么字体类型、颜色、大小的设置，只有标题级别段落。所以说他是一内容为中心的写作方式。附赠一个markdown的语法完整<a href="http://xianbai.me/learn-md/article/extension/table.html">网站</a>。</p>
</blockquote>
<hr>
<h2 id="致谢"><a href="#致谢" class="headerlink" title="致谢"></a>致谢</h2><p>这个博客的诞生离不开科大<a href="https://qzwangustc.github.io/">某王姓大佬</a>的一路扶持，再次感谢！长路漫漫，上下求索，在成长的岁月中，曾经陪你笑陪你愁的朋友，是一辈子都不会忘记的，愿彼此都能珍惜这份友谊，做个永远的朋友。学习无疑是辛苦的，有时甚至略显乏味，没有娱乐活动，没有同学间的嬉笑吵闹，一切都显得平静，但是最后能有所进步，能够看到更多的东西，能明白许多道理，这便是最好的。</p>
]]></content>
      <categories>
        <category>学习博客</category>
      </categories>
      <tags>
        <tag>hexo Markdown</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2020/10/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>working day</title>
    <url>/2020/10/09/python_fdtd/</url>
    <content><![CDATA[<h1 id="python中数组计算有用的函数"><a href="#python中数组计算有用的函数" class="headerlink" title="python中数组计算有用的函数"></a>python中数组计算有用的函数</h1><h2 id="numpy库"><a href="#numpy库" class="headerlink" title="numpy库"></a>numpy库</h2><p>NumPy(Numerical Python) 是 Python 语言的一个扩展程序库，支持大量的维度数组与矩阵运算，此外也针对数组运算提供大量的数学函数库。NumPy 通常与 SciPy（Scientific Python）和 Matplotlib（绘图库）一起使用， 这种组合广泛用于替代 MatLab，是一个强大的科学计算环境。</p>
<h3 id="numpy-roll-函数"><a href="#numpy-roll-函数" class="headerlink" title="numpy.roll()函数"></a>numpy.roll()函数</h3><p>先导入库，定义数组</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x = np.arange(<span class="number">27</span>)       <span class="comment">#取 0-26 的元素数组</span></span><br><span class="line"></span><br><span class="line">x1 = reshape(x, (<span class="number">3</span>, <span class="number">3</span>, <span class="number">3</span>))<span class="comment">#整合成3×3×3的3维数组</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#沿i正方向滚动，x1[0,1,2][j][k]-&gt;x1[2,0,1][j][k]</span></span><br><span class="line">a_X = np.roll(x1, <span class="number">1</span>, axis=<span class="number">0</span>)    <span class="comment">#若为-1，向负方向滚动</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#沿j正方向滚动，x1[i][0,1,2][k]-&gt;x1[j][2,0,1][k]</span></span><br><span class="line">a_y = np.roll(x1, <span class="number">1</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#沿k正方向滚动，x1[i][j][0,1,2]-&gt;x1[j][k][2,0,1]</span></span><br><span class="line">a_z = np.roll(x1, <span class="number">1</span>, axis=<span class="number">2</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个函数在数组错位相减时起到了极大的作用，尤其是那种三维数组只变动其中一维的情况下，这样可以直接做整体差，而不用采用老办法的三次for循环，大大的减少了运算量。</p>
<h2 id="应用与FDTD算法"><a href="#应用与FDTD算法" class="headerlink" title="应用与FDTD算法"></a>应用与FDTD算法</h2><p>应用于FDTD算法时，显示了其巨大的优越性。下面写部分代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#dx,dy,dz,dt,J都默认定义过了,且电磁波在电介质中传播</span></span><br><span class="line"><span class="comment">#FDTD求电场强度x轴分量Ex</span></span><br><span class="line">Chx = ((dt / dy) * (np.roll(Hz, <span class="number">1</span>, axis=<span class="number">1</span>) - Hz) - (dt / dz) * (np.roll(Hy, <span class="number">1</span>, axis=<span class="number">2</span>) - Hy))</span><br><span class="line"></span><br><span class="line">Chy = -((dt / dx) * (np.roll(Hz, <span class="number">1</span>, axis=<span class="number">0</span>) - Hz) - (dt / dz) * (np.roll(Hx, <span class="number">1</span>, axis=<span class="number">2</span>) - Hx))</span><br><span class="line"></span><br><span class="line">Chz =((dt / dx) * (np.roll(Hy, <span class="number">1</span>, axis=<span class="number">0</span>) - Hy) - (dt / dy) * (np.roll(Hx, <span class="number">1</span>, axis=<span class="number">1</span>) - Hx))</span><br><span class="line"></span><br><span class="line">Chx = np.multiply(<span class="number">1</span> / eps, Chx)</span><br><span class="line">Chy = np.multiply(<span class="number">1</span> / eps, Chy)</span><br><span class="line">Chz = np.multiply(<span class="number">1</span> / eps, Chz)</span><br><span class="line"></span><br><span class="line">Ex -= Chx</span><br><span class="line">Ey -= Chy</span><br><span class="line">Ez -= Chz</span><br><span class="line"></span><br><span class="line">Ez[jx, jy, jz] -= J;    <span class="comment"># 中心点赋源</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#FDTD求磁场强度x轴分量Ex</span></span><br><span class="line">Hx += ((dt / dy) * (Ez - np.roll(Ez, <span class="number">-1</span>, axis=<span class="number">1</span>)) - (dt / dz) * (Ey - np.roll(Ey, <span class="number">-1</span>, axis=<span class="number">2</span>)))</span><br><span class="line"></span><br><span class="line">Hy += -((dt / dx) * (Ez - np.roll(Ez, <span class="number">-1</span>, axis=<span class="number">0</span>)) - (dt / dz) * (Ex - np.roll(Ex, <span class="number">-1</span>, axis=<span class="number">2</span>)))</span><br><span class="line">    </span><br><span class="line">Hz += ((dt / dx) * (Ey - np.roll(Ey, <span class="number">-1</span>, axis=<span class="number">0</span>)) - (dt / dy) * (Ex - np.roll(Ex, <span class="number">-1</span>, axis=<span class="number">1</span>)))</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里的电场正方向滚动、磁场的向负方向滚动，正好可以让两个边界面的值处于不正确，然后利用边界面条件更新边界面值。</p>
</blockquote>
<p>先存一张元胞图。<br><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/2020-10-09-21-33-57.png" alt=""></p>
]]></content>
      <categories>
        <category>学习技能</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>python-Numpy</title>
    <url>/2020/10/10/python_numpy/</url>
    <content><![CDATA[<h1 id="python的数组运算"><a href="#python的数组运算" class="headerlink" title="python的数组运算"></a>python的数组运算</h1><p>不得不说，python真的是集成了很多计算的库，功能十分强大，在来介绍一下numpy这个库。</p>
<h2 id="numpy-shape"><a href="#numpy-shape" class="headerlink" title="numpy.shape()"></a>numpy.shape()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">a = np.array([[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>],[<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>],[<span class="number">10</span>,<span class="number">11</span>,<span class="number">12</span>]])<span class="comment">#两个中括号代表矩阵，这是4×3的矩阵</span></span><br><span class="line">print(a)</span><br><span class="line">print(a.shape)<span class="comment">#显示矩阵的维度，这时候就会输出 (4,3)</span></span><br><span class="line">print(a.shape[<span class="number">0</span>])<span class="comment">#显示矩阵的行数</span></span><br><span class="line">print(a.shape[<span class="number">1</span>])<span class="comment">#显示举证的列数</span></span><br></pre></td></tr></table></figure>
<p>如果a是数组，则输出数组的大小。</p>
<h2 id="numpy-squeeze"><a href="#numpy-squeeze" class="headerlink" title="numpy.squeeze()"></a>numpy.squeeze()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">d = array([[[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>],</span><br><span class="line">        [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]]])<span class="comment">#这是一个1×2×5的矩阵</span></span><br><span class="line">np.squeeze(d,axis=<span class="number">0</span>).shape</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>这个函数的作用就是删除单维度，axis=0,代表删除第一维，若第一维不是单维度会报错。</p>
<p>输出结果<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">2</span>,<span class="number">5</span>)   <span class="comment">#输出矩阵变成了2×5的二维矩阵</span></span><br></pre></td></tr></table></figure></p>
<h2 id="numpy-matlib-repmat"><a href="#numpy-matlib-repmat" class="headerlink" title="numpy.matlib.repmat()"></a>numpy.matlib.repmat()</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy.matlib</span><br><span class="line">a0 = np.array(<span class="number">1</span>)</span><br><span class="line">np.matlib.repmat(a0, <span class="number">2</span>, <span class="number">3</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>输出结果<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">array([[<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>],</span><br><span class="line">       [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>]])</span><br></pre></td></tr></table></figure><br>此函数作用就是，将a0数组，复制2×3遍，形成矩阵。此函数已经不被推荐使用了。</p>
]]></content>
      <categories>
        <category>学习技能</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>“first”</title>
    <url>/2020/10/03/%E2%80%9Cfirst%E2%80%9D/</url>
    <content><![CDATA[<h1 id="开篇"><a href="#开篇" class="headerlink" title="开篇"></a>开篇</h1><p>调整一下博客布局</p>
]]></content>
      <categories>
        <category>-其他</category>
      </categories>
      <tags>
        <tag>-杂说</tag>
      </tags>
  </entry>
  <entry>
    <title>Try</title>
    <url>/2021/01/02/two_month/</url>
    <content><![CDATA[<h1 id="内心的不安"><a href="#内心的不安" class="headerlink" title="内心的不安"></a>内心的不安</h1><hr>
<p>道理讲得很多，能做到的很少。</p>
<hr>
<p>该懂的大部分都懂，理智却很难战胜欲望，惰性总能给自己找出一大堆理由去享受堕落。也不能说堕落，这更像是一种对前路迷茫而产生恐惧的逃避，沉迷在电子毒品中可以暂时脱离现实生活的困境。</p>
<p>现在知道解决问题的方法是大量阅读与思考，而这也是极度枯燥无聊的过程，还伴随着少量头发的脱落，注意力的难以集中，问题难以得到实质性的进展。（有些论文的质量是真的差，读的前言不接后语）</p>
<p>发奋与发疯的同学都在，你很难确定那是怎么样一种人，也许还有发情的也说不定。人种这群居高级动物很享受别人的认同。</p>
]]></content>
      <categories>
        <category>感想反思</category>
      </categories>
      <tags>
        <tag>angry</tag>
      </tags>
  </entry>
  <entry>
    <title>读书笔记</title>
    <url>/2021/02/02/self-control/</url>
    <content><![CDATA[<h1 id="《自控力-和压力做朋友》"><a href="#《自控力-和压力做朋友》" class="headerlink" title="《自控力-和压力做朋友》"></a>《自控力-和压力做朋友》</h1><hr>
<p>寒假阅读写作第一篇-瞎捣鼓</p>
<p>与其恐惧，不如拥抱</p>
<hr>
<h2 id="第一部分-重新思考压力"><a href="#第一部分-重新思考压力" class="headerlink" title="第一部分-重新思考压力"></a>第一部分-重新思考压力</h2><h3 id="1-改变思维模式：什么是压力？压力不是负担"><a href="#1-改变思维模式：什么是压力？压力不是负担" class="headerlink" title="1.改变思维模式：什么是压力？压力不是负担"></a>1.改变思维模式：什么是压力？压力不是负担</h3><p>这本书对压力做的定义是：<strong>当你在乎的东西发生危险所引发的反应。</strong></p>
<p>所以说压力与有意义是成正比的，想要有意义的生活必然是有压力的。改变压力思维第一步，在每天的生活中关注你现在的思维是如何产生的。这很难做到。思维不像我们做的一个选择，即使你完全知道自己是如何看待压力的，可能还意识不到信念是怎么样影响思想、感情和行动的。这就是思维盲区。</p>
<p>这需要练习，练习思维察觉，开始注意你是如何思考和讨论压力的。</p>
<p>价值观，选三个自己感觉最认同的词，遇到压力时用这三个价值观引导自己。可以制作成实物或者纸条。</p>
<p>逃避压力会导致压力繁殖。越坚定的逃避压力越容易陷进向下的螺旋。甚至有用自毁行为转移注意力的。</p>
<p>关注更为宏大的一个目标，可以有效减轻当前的压力。</p>
<p>转换恐惧为兴奋，即使你内心知道这是欺骗自己，也要有这个概念在。</p>
]]></content>
      <categories>
        <category>学习技能</category>
      </categories>
      <tags>
        <tag>read</tag>
      </tags>
  </entry>
  <entry>
    <title>buck、boost电路</title>
    <url>/2021/02/28/electrical-work/</url>
    <content><![CDATA[<h1 id="buck、boost电路的对偶关系"><a href="#buck、boost电路的对偶关系" class="headerlink" title="buck、boost电路的对偶关系"></a>buck、boost电路的对偶关系</h1><p><em>为工作记，为电路通</em></p>
<p>重温《电力电子技术》这本书，大方向就四个，DC-DC、DC-AC、AC-DC、AC-AC。此篇首先分析DC-DC电路，以buck电路为主，写一下所得所感。</p>
<h2 id="Buck电路拓扑"><a href="#Buck电路拓扑" class="headerlink" title="Buck电路拓扑"></a>Buck电路拓扑</h2><p>Buck电路的拓扑图：<br><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210228211443.png" alt=""></p>
<p>buck电路利用的是一种斩波降压的思想，利用开关管持续开断的能力，调节分配三极管导通关断时间，以控制降压比。这个降压不是普通意义上不变直流，而是利用积分的思想，在一段时间内的平均电压。占空比，即在周期内导通的时间/周期；易知，降压比=占空比。</p>
<p>细看拓扑图，电容C1是用来去除U0的纹波，毕竟我们希望输出电压的波形尽可能的平稳，而不产生电压脉动。只有滤波元件是远远不够的，开关管开断会产生突变的电压，而电容电压是不能突变，否则会产生巨大的电流，烧掉三极管。故在拓扑中又添加了缓冲元件，电感和二极管的加入，使得电容两端的电压不会突变，且在开断瞬间三极管的电流应力（应用中的电流与零件规格值的比值）被电感限制。又为了避免新加的电感两边电流突变而导致的过电压，加入续流二极管。</p>
<h2 id="具体波形"><a href="#具体波形" class="headerlink" title="具体波形"></a>具体波形</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210228223010.png" alt=""></p>
<p>理想情况下，电路中的电容电感在一个周期内获得的能量是0，也就是说在周期内吸收的能量和释放的能量相等。这就引出了<strong>伏秒平衡</strong>。</p>
<p><strong>伏秒平衡</strong>：在稳态工作的开关电源中电感两端的正伏秒值等于负伏秒值。</p>
<pre><code>    当开关电路稳定工作的时候，一个开关周期内的电感的电流变化量最终为0，即经过电感的电流增量和电感的电流减少量是相等。换句话说，在开关电路中，一个周期因开关作用被分为两段，其中一段时间内电感电流在增加，另一段时间内电感电流在减少，稳定状态下那么在一个开关周期内，电流的增加量与电流的减少量是相等。

    即：ΔI_on＝ΔI_off即，电感在导通和关断时，其电流变化相等。比如说你打开开关给电感供电，然后又关闭开关，那经过电感的电流增量最终是0，增加的电流和减少的电流相等。这也算以一种稳态。

    又因为：电感的电压公式 ：V＝L×di/dt=L×ΔI/ ΔT所以VΔT_on=VΔT_off，即伏秒平衡。电感不是耗能元件所以在平衡状态电感吸收和释放的能量是一致的，w=1/2*L*i*i，即电流的变化量是一致的，所以V*ΔT一致，从另一个角度看，也可以看出电感端电压越高，其电流上升越快，充电越快。
</code></pre><h2 id="Boost电路"><a href="#Boost电路" class="headerlink" title="Boost电路"></a>Boost电路</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301144441.png" alt=""><br>Boost其实可以由Buck型电流变换电路转变。先引入一个前提，电容、电感、三极管、二极管都没有损耗，则输出功率就等于输入功率，降压电路也就意味着是升流电路，再将这个电流源，用电压源串电感的形式进行替代，就转变成升压电路，去除冗余，则成为Boost电路。</p>
<p>分析Buck电流型变换电路。考虑对偶的形式，输入电压源串三极管转变为输入电流源并三极管，接下来就是在输出串滤波电感，滤除电流纹波。在输出和输入直接加入缓存单元。原来的缓冲单元是并二极管，串电感，现在变成串二极管，并电容。从结构到元件上都有一种对偶关系。这就实现了降流电路。</p>
<p>考虑到boost升压电路，是电压-电压，输入的电流源用电压源串大电感替换（开关频率也得满足条件），输出边的滤波电感就不需要了，电压纹波由并联的电容滤除了。由伏秒平衡求得升压比=1/1-D；</p>
]]></content>
      <categories>
        <category>电力电子技术</category>
      </categories>
      <tags>
        <tag>principle</tag>
      </tags>
  </entry>
  <entry>
    <title>开关电源拓扑</title>
    <url>/2021/03/01/dldz-tp/</url>
    <content><![CDATA[<h1 id="开关电源拓扑的优缺点对比"><a href="#开关电源拓扑的优缺点对比" class="headerlink" title="开关电源拓扑的优缺点对比"></a>开关电源拓扑的优缺点对比</h1><h2 id="基本的脉冲宽度调制波形"><a href="#基本的脉冲宽度调制波形" class="headerlink" title="基本的脉冲宽度调制波形"></a>基本的脉冲宽度调制波形</h2><p>基本的脉冲宽度调制波形定义如下：<br><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301165827.png" alt=""></p>
<h2 id="Buck降压"><a href="#Buck降压" class="headerlink" title="Buck降压"></a>Buck降压</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301165918.png" alt=""><br>特点</p>
<p>■ 把输入降至一个较低的电压。</p>
<p>■ 可能是最简单的电路。</p>
<p>■ 电感/电容滤波器滤平开关后的方波。</p>
<p>■ 输出总是小于或等于输入。</p>
<p>■ 输入电流不连续 (斩波)。</p>
<p>■ 输出电流平滑。</p>
<h2 id="Boost升压"><a href="#Boost升压" class="headerlink" title="Boost升压"></a>Boost升压</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170042.png" alt=""><br>特点</p>
<p>■ 把输入升至一个较高的电压。</p>
<p>■ 与降压一样，但重新安排了电感、开关和二极管。</p>
<p>■ 输出总是比大于或等于输入(忽略二极管的正向压降)。</p>
<p>■ 输入电流平滑。</p>
<p>■ 输出电流不连续 (斩波)。</p>
<h2 id="Buck-Boost降压-升压"><a href="#Buck-Boost降压-升压" class="headerlink" title="Buck-Boost降压-升压"></a>Buck-Boost降压-升压</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170129.png" alt=""><br>特点</p>
<p>■ 电感、开关和二极管的另一种安排方法。</p>
<p>■ 结合了降压和升压电路的缺点。</p>
<p>■ 输入电流不连续 (斩波)。</p>
<p>■ 输出电流也不连续 (斩波)。</p>
<p>■ 输出总是与输入反向 (注意电容的极性)，但是幅度可以小于或大于输入。</p>
<p>■ “反激”变换器实际是降压-升压电路隔离(变压器耦合)形式。</p>
<h2 id="Flyback反激"><a href="#Flyback反激" class="headerlink" title="Flyback反激"></a>Flyback反激</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301172808.png" alt=""><br>V_out=D/[(n=1/2)<em>(1-D)]</em>V_in;<br>特点</p>
<p>■ 如降压-升压电路一样工作，但是电感有两个绕组，而且同时作为变压器和电感。</p>
<p>■ 输出可以为正或为负，由线圈和二极管的极性决定。</p>
<p>■ 输出电压可以大于或小于输入电压，由变压器的匝数比决定。</p>
<p>■ 这是隔离拓扑结构中最简单的</p>
<p>■ 增加次级绕组和电路可以得到多个输出。</p>
<p>此处初级电感很低，用于确定峰值电流和存储的能量。当初级开关断开时，能量传送到次级。</p>
<h2 id="Forward正激"><a href="#Forward正激" class="headerlink" title="Forward正激"></a>Forward正激</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170235.png" alt=""><br>特点</p>
<p>■ 降压电路的变压器耦合形式。</p>
<p>■ 不连续的输入电流，平滑的输出电流。</p>
<p>■ 因为采用变压器，输出可以大于或小于输入，可以是任何极性。</p>
<p>■ 增加次级绕组和电路可以获得多个输出。</p>
<p>■ 在每个开关周期中必须对变压器磁芯去磁。常用的做法是增加一个与初级绕组匝数相同的绕组。</p>
<p>■ 在开关接通阶段存储在初级电感中的能量，在开关断开阶段通过另外的绕组和二极管释放。</p>
<h2 id="Two-Transistor-Forward双晶体管正激"><a href="#Two-Transistor-Forward双晶体管正激" class="headerlink" title="Two-Transistor Forward双晶体管正激"></a>Two-Transistor Forward双晶体管正激</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301173309.png" alt=""><br>特点</p>
<p>■ 两个开关同时工作。</p>
<p>■ 开关断开时，存储在变压器中的能量使初级的极性反向，使二极管导通。</p>
<p>■ 主要优点：</p>
<p>■ 每个开关上的电压永远不会超过输入电压。</p>
<p>■ 无需对绕组磁道复位。</p>
<p>■ 初级电感很高，因为无需存储能量。</p>
<p>■ 磁化电流 (i1) 流入 “磁化电感”，使磁芯在初级开关断开后去磁 (电压反向)。</p>
<h2 id="Push-Pull推挽"><a href="#Push-Pull推挽" class="headerlink" title="Push-Pull推挽"></a>Push-Pull推挽</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170346.png" alt=""><br>特点</p>
<p>■ 开关(FET)的驱动不同相，进行脉冲宽度调制(PWM)以调节输出电压。</p>
<p>■ 良好的变压器磁芯利用率—-在两个半周期中都传输功率。</p>
<p>■ 全波拓扑结构,所以输出纹波频率是变压器频率的两倍。</p>
<p>■ 施加在FET上的电压是输入电压的两倍。</p>
<h2 id="Half-Bridge半桥"><a href="#Half-Bridge半桥" class="headerlink" title="Half-Bridge半桥"></a>Half-Bridge半桥</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170418.png" alt=""><br>特点</p>
<p>■ 较高功率变换器极为常用的拓扑结构。</p>
<p>■ 开关(FET)的驱动不同相，进行脉冲宽度调制(PWM)以调节输出电压。</p>
<p>■ 良好的变压器磁芯利用率—-在两个半周期中都传输功率。而且初级绕组的利用率优于推挽电路。</p>
<p>■ 全波拓扑结构,所以输出纹波频率是变压器频率的两倍。</p>
<p>■ 施加在FET上的电压与输入电压相等。</p>
<h2 id="Full-Bridge全桥"><a href="#Full-Bridge全桥" class="headerlink" title="Full-Bridge全桥"></a>Full-Bridge全桥</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170452.png" alt=""><br>特点</p>
<p>■ 较高功率变换器最为常用的拓扑结构。</p>
<p>■ 开关(FET)以对角对的形式驱动，进行脉冲宽度调制(PWM)以调节输出电压。</p>
<p>■ 良好的变压器磁芯利用率—-在两个半周期中都传输功率</p>
<p>■ 全波拓扑结构，所以输出纹波频率是变压器频率的两倍。</p>
<p>■ 施加在 FETs上的电压与输入电压相等。</p>
<p>■ 在给定的功率下，初级电流是半桥的一半。</p>
<h2 id="SEPIC单端初级电感变换器"><a href="#SEPIC单端初级电感变换器" class="headerlink" title="SEPIC单端初级电感变换器"></a>SEPIC单端初级电感变换器</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170600.png" alt=""><br>特点</p>
<p>■ 输出电压可以大于或小于输入电压。</p>
<p>■ 与升压电路一样，输入电流平滑，但是输出电流不连续。</p>
<p>■ 能量通过电容从输入传输至输出。</p>
<p>■ 需要两个电感。</p>
<h2 id="Cuk电路"><a href="#Cuk电路" class="headerlink" title="Cuk电路"></a>Cuk电路</h2><p><img src="https://cdn.jsdelivr.net/gh/flag-fly/cdn/img/20210301170643.png" alt=""><br>特点</p>
<p>■ 输出反相</p>
<p>■ 输出电压的幅度可以大于或小于输入。</p>
<p>■ 输入电流和输出电流都是平滑的。</p>
<p>■ 能量通过电容从输入传输至输出。</p>
<p>■ 需要两个电感。</p>
<p>■ 电感可以耦合获得零纹波电感电流。</p>
<h1 id="电路工作的细节"><a href="#电路工作的细节" class="headerlink" title="电路工作的细节"></a>电路工作的细节</h1><p>BUCK电路连续、临界、断续导电，以电感的电流为标准。</p>
<h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>还有许多拓扑结构，但大多是此处所述拓扑的组合或变形。<br>■ 每种拓扑结构包含独特的设计权衡：</p>
<p>施加在开关上的电压</p>
<p>斩波和平滑输入输出电流</p>
<p>绕组的利用率</p>
<p>■ 选择最佳的拓扑结构需要研究：</p>
<p>输入和输出电压范围</p>
<p>电流范围</p>
<p>成本和性能、大小和重量之比<br>引<a href="https://zhuanlan.zhihu.com/p/44892426">知乎的教程</a> ；后续再细补。</p>
]]></content>
      <categories>
        <category>电力电子技术</category>
      </categories>
      <tags>
        <tag>topological graph</tag>
      </tags>
  </entry>
</search>
